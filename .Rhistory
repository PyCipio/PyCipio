p_load(RGoogleAnalytics, rstan, brms, rethinking)
data(Kline)
View(Kline)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
library(pacman)
p_load(Rcpp)
download.packages(Rcpp)
install.packages(Rcpp)
library(Rcpp)
p_load(Rcpp)
install.packages(Rcpp)
library(reticulate)
library(pacman)
p_load(reticulate )
import pandas
import pandas
l = [1,2,3,4,5,6,7]
l = [1,2,3,4,5,6,7]
l = [1,2,3,4,5,6,7]
l[2:6]
l = c(1,2,3,4,5,6,7,8)
l[2:6]
pos = 1/29*1/29*2/5
neg = 2/34*2/34*3/5
power.t.test(power=0.9,delta=0.3,sd=0.28,type="two.sample")
power.t.test(power=0.9,delta=1.34,sd=2.5,type="two.sample")
samplesizes <- seq(from=10,to=200,by=10)
power.samplesizes <- power.prop.test(n=samplesizes,p1=1.34,p2=2.5)$power
plot(samplesizes,
power.samplesizes,
xlim=c(0,200),
xlab="Sample size",
ylab="Expected power",
ylim=c(0,1),
type="b",
col="darkorange",
lwd=5,axes=FALSE)
axis(1,at=c(0,50,100,150,200))
axis(2,at=c(0,0.25,0.5,0.75,1),labels=paste(c(0,25,50,75,100),"%"))
samplesizes <- seq(from=10,to=200,by=10)
power.samplesizes <- power.prop.test(n=samplesizes,p1=0.3,p2=0.55)$power
plot(samplesizes,
power.samplesizes,
xlim=c(0,200),
xlab="Sample size",
ylab="Expected power",
ylim=c(0,1),
type="b",
col="darkorange",
lwd=5,axes=FALSE)
axis(1,at=c(0,50,100,150,200))
axis(2,at=c(0,0.25,0.5,0.75,1),labels=paste(c(0,25,50,75,100),"%"))
power.t.test(power=0.9,delta=1.34,sd=2.5)
power.t.test(power=0.9,delta=1.34,sd=2.5,type="two.sample")
pwr.t.test(d=1.34, sig.level=.05, power=.9, alternative="two.sided")
power.t.test(d=1.34, sig.level=.05, power=.9, alternative="two.sided")
power.t.test(d=1.34, sd=2.5, sig.level=.05, power=.9, alternative="two.sided")
power.t.test(d=1.34, sd=3, sig.level=.05, power=.9, alternative="two.sided")
power.t.test(d=1.34, sd=3.05, sig.level=.05, power=.9, alternative="two.sided")
cite
reference
citation()
setwd("C:/Users/emilr/OneDrive - Aarhus universitet/Uni/CogSci - Master's-DESKTOP-TNA0AED/Human Computer interaction/Exercises/Week 1 - eye tracking/Eye tracking task")
pacman::p_load(tidyverse, lmerTest)
df <- read.csv("clean_data.csv")
View(df)
setwd(~)
setwd("~")
getwd()
setwd("~")
getwd()
install.packages("https://github.com/carlanetto/M4comp2018/releases/download/0.2.0/M4comp2018_0.2.0.tar.gz", repos=NULL)
print(2)
202
2+2
install.packages("https://github.com/carlanetto/M4comp2018/releases/download/0.2.0/M4comp2018_0.2.0.tar.gz", repos=NULL)
library(M4comp2018)
data(M4)
names(M4[[1]])
yearly_M4 <- Filter(function(l) l$period == "Yearly", M4)
yearly_M4
#plot one of the series, in red the future data
#in black, the hitorical data
plot(ts(c(yearly_M4[[100]]$x, yearly_M4[[100]]$xx),
start=start(yearly_M4[[100]]$x), frequency = frequency(yearly_M4[[100]]$x)),
col="red", type="l", ylab="")
lines(yearly_M4[[100]]$x, col="black")
#plot one of the series, in red the future data
#in black, the hitorical data
plot(ts(c(yearly_M4[[101]]$x, yearly_M4[[101]]$xx),
start=start(yearly_M4[[101]]$x), frequency = frequency(yearly_M4[[101]]$x)),
col="red", type="l", ylab="")
lines(yearly_M4[[101]]$x, col="black")
#plot one of the series, in red the future data
#in black, the hitorical data
plot(ts(c(yearly_M4[[300]]$x, yearly_M4[[300]]$xx),
start=start(yearly_M4[[300]]$x), frequency = frequency(yearly_M4[[300]]$x)),
col="red", type="l", ylab="")
lines(yearly_M4[[300]]$x, col="black")
#plot one of the series, in red the future data
#in black, the hitorical data
plot(ts(c(yearly_M4[[400]]$x, yearly_M4[[400]]$xx),
start=start(yearly_M4[[400]]$x), frequency = frequency(yearly_M4[[400]]$x)),
col="red", type="l", ylab="")
lines(yearly_M4[[400]]$x, col="black")
#plot one of the series, in red the future data
#in black, the hitorical data
plot(ts(c(yearly_M4[[500]]$x, yearly_M4[[500]]$xx),
start=start(yearly_M4[[500]]$x), frequency = frequency(yearly_M4[[500]]$x)),
col="red", type="l", ylab="")
lines(yearly_M4[[500]]$x, col="black")
#plot one of the series, in red the future data
#in black, the hitorical data
plot(ts(c(yearly_M4[[600]]$x, yearly_M4[[600]]$xx),
start=start(yearly_M4[[600]]$x), frequency = frequency(yearly_M4[[600]]$x)),
col="red", type="l", ylab="")
lines(yearly_M4[[600]]$x, col="black")
#plot one of the series, in red the future data
#in black, the hitorical data
plot(ts(c(yearly_M4[[1000]]$x, yearly_M4[[1000]]$xx),
start=start(yearly_M4[[1000]]$x), frequency = frequency(yearly_M4[[1000]]$x)),
col="red", type="l", ylab="")
lines(yearly_M4[[1000]]$x, col="black")
#plot one of the series, in red the future data
#in black, the hitorical data
plot(ts(c(yearly_M4[[10000]]$x, yearly_M4[[10000]]$xx),
start=start(yearly_M4[[10000]]$x), frequency = frequency(yearly_M4[[10000]]$x)),
col="red", type="l", ylab="")
lines(yearly_M4[[10000]]$x, col="black")
#plot one of the series, in red the future data
#in black, the hitorical data
plot(ts(c(yearly_M4[[43]]$x, yearly_M4[[43]]$xx),
start=start(yearly_M4[[43]]$x), frequency = frequency(yearly_M4[[43]]$x)),
col="red", type="l", ylab="")
lines(yearly_M4[[43]]$x, col="black")
#plot one of the series, in red the future data
#in black, the hitorical data
plot(ts(c(yearly_M4[[61]]$x, yearly_M4[[61]]$xx),
start=start(yearly_M4[[61]]$x), frequency = frequency(yearly_M4[[61]]$x)),
col="red", type="l", ylab="")
lines(yearly_M4[[61]]$x, col="black")
ts <- yearly_M4[[61]]
#plot one of the series, in red the future data
#in black, the hitorical data
plot(ts(c(yearly_M4[[61]]$x, yearly_M4[[61]]$xx),
start=start(yearly_M4[[61]]$x), frequency = frequency(yearly_M4[[61]]$x)),
col="red", type="l", ylab="")
lines(yearly_M4[[61]]$x, col="black")
ts <- yearly_M4[[61]]
y <- tsibble(
Year = 1929:2009,
Observation = ts[x],
index = Year
)
library(dplyr)
library(lubridate)
library(tsibble)
ts <- yearly_M4[[61]]
y <- tsibble(
Year = 1929:2009,
Observation = ts[x],
index = Year
)
ts
ts <- yearly_M4[[61]]
y <- tsibble(
Year = 1929:2009,
Observation = ts$x,
index = Year
)
View(y)
#Create subset of M4 data
ts <- yearly_M4[[61]]
#Remove big stuff we no longer need
rm(M4)
rm(yearly_M4)
y <- tsibble(
Year = 1929:2009,
Observation = ts$x,
index = Year
)
ts$period
ts$period
ts$x.min()
ts$x
ts$x[0]
ts$x[1]
ts$x.
ts$x
ts$x.start
ts$x.
ts$x$start
ts$x
time(ts$x)
min(time(ts$x))
max(time(ts$x))
#Create subset of M4 data
ts <- yearly_M4[[61]]
View(y)
View(y)
y %>% features(Observation, feat_acf)
library(dplyr)
library(lubridate)
library(tsibble)
library(feasts)
y %>% features(Observation, feat_acf)
#Seasonal and Trend decomposition using Loess
y %>% features(Observation, feat_stl
y %>% features(Observation, feat_stl
y %>% features(Observation, feat_stl)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tsibble)
library(feasts)
library(fable)
library(M4comp2018)
data(M4)
M4_monthly <- Filter(function(l) l$period == "Monthly", M4)
data <- [[1]]$x
data <- M4_monthly[[1]]$x
rm(M4_monthly)
rm(M4)
(train <- as_tsibble(M4_monthly[[1]]$x))
plot(ts(c(data$x,data$xx),
start=start(data$x), frequency = frequency(data$x)),
col="red", type="l", ylab="")
library(M4comp2018)
data(M4)
M4_monthly <- Filter(function(l) l$period == "Monthly", M4)
data <- M4_monthly[[1]]
rm(M4_monthly)
rm(M4)
plot(ts(c(yearly_M4[[61]]$x, yearly_M4[[61]]$xx),
start=start(yearly_M4[[61]]$x), frequency = frequency(yearly_M4[[61]]$x)),
col="red", type="l", ylab="")
plot(ts(c(data$x, data$xx),
start=start(data$x), frequency = frequency(data$x)),
col="red", type="l", ylab="")
lines(data$x, col="black")
(train <- as_tsibble(data$x))
(test <- as_tsibble(data$xx))
train %>% autoplot(value) +
labs(title = "Mystery time series")
(lambda <- train %>%
features(value, feature = guerrero) %>%
pull(lambda_guerrero))
(train <- train %>% mutate(box_cox = box_cox(value, lambda = lambda)))
(test <- test %>% mutate(box_cox = box_cox(value, lambda = lambda)))
train %>% autoplot(box_cox) +
labs(title = "Transformed mystery time series")
train %>% autoplot(box_cox) +
labs(title = "Transformed mystery time series")
train %>% autoplot(value) +
labs(title = "Mystery time series")
train %>% features(value, feat_acf)
train %>% features(box_cox, feat_acf)
train %>% features(value, feat_stl)
train %>% features(box_cox, feat_stl)
mystery_fit <- train %>%
model(
Mean = MEAN(value),
`Naïve` = NAIVE(value),
`Seasonal naïve` = SNAIVE(value)
)
(mystery_fc <- mystery_fit %>% forecast(h = 18))
mystery_fc %>% autoplot(data = filter(train, index >= yearmonth("Jan 2012")), level = NULL) +
autolayer(test, colour = "black", .vars = value) +
labs(y = "Values", title = "Forecasts for mystery time series") +
guides(colour = guide_legend(title = "Forecast"))
mystery_fit %>%
augment() %>%
filter(.model == "Naïve") %>%
autoplot(.innov) +
labs(y = "value", title = "Residuals from the naïve method")
mystery_fit %>%
augment() %>%
filter(.model == "Seasonal naïve") %>%
ACF(.innov) %>%
autoplot() +
labs(title = "Residuals from the seasonal naïve method")
train %>%
model(NAIVE(value)) %>%
gg_tsresiduals()
train %>%
model(SNAIVE(value)) %>%
gg_tsresiduals()
train %>%
model(NAIVE(value)) %>%
augment() %>%
features(.innov, ljung_box, lag = 10, dof = 0)
train %>%
model(SNAIVE(value)) %>%
augment() %>%
features(.innov, ljung_box, lag = 10, dof = 0)
mystery_snaive_fit <- train %>% model(SNAIVE(value))
mystery_snaive_fc <- mystery_snaive_fit %>% forecast(h = 18)
View(data)
mystery_snaive_fc %>% hilo()
mystery_snaive_fc %>%
autoplot(filter(train, index >= yearmonth("Jan 2012")), level = c(50, 80)) +
labs(title="Mystery time series forecast with intervals", y="value" )
(mystery_snaive_sim <- mystery_snaive_fit %>% generate(h = 18, times = 5, bootstrap = TRUE))
train %>% filter(index >= yearmonth("Jan 2012")) %>%
ggplot(aes(x = index)) +
geom_line(aes(y = value)) +
geom_line(aes(y = .sim, colour = as.factor(.rep)), data = mystery_snaive_sim) +
labs(title = "Possible futures for the mystery time series") +
guides(colour = FALSE)
mystery_snaive_bsfc <- mystery_snaive_fit %>% forecast(h = 18, bootstrap = TRUE)
mystery_snaive_bsfc %>%
autoplot(filter(train, index >= yearmonth("Jan 2012")), level = c(50, 80))
mystery_rw_log_drift_fit <- train %>% model(RW(log(value) ~ drift()))
mystery_rw_log_drift_fc <- mystery_rw_log_drift_fit %>% forecast(h = 18)
mystery_rw_log_drift_fc %>%
autoplot(filter(train, index >= yearmonth("Jan 2012")),
level = c(50, 80),
point_forecast = lst(mean, median)) +
labs(title="Mystery time series forecast with intervals", y="value" )
(mystery_dcmp <- train14 %>%
model(STL(value ~ trend(window = 16), robust = TRUE)) %>%
components() %>%
select(-.model))
(mystery_dcmp <- mystery_rw_log_drift_fit %>%
model(STL(value ~ trend(window = 16), robust = TRUE)) %>%
components() %>%
select(-.model))
(mystery_dcmp <- train %>%
model(STL(value ~ trend(window = 16), robust = TRUE)) %>%
components() %>%
select(-.model))
mystery_dcmp %>%
model(NAIVE(season_adjust)) %>%
forecast() %>%
autoplot(filter(mystery_dcmp, index >= yearmonth("Jan 2007"))) +
labs(title = "Forecast for trend part of mystery time series")
mystery_dcmp_fit <- train %>%
model(stlf = decomposition_model(
STL(value ~ trend(window = 16), robust = TRUE),
NAIVE(season_adjust)
))
mystery_dcmp_fit %>%
forecast() %>%
autoplot(filter(train, index >= yearmonth("Jan 2007")))
mystery_dcmp_fit <- train %>%
model(stlf = decomposition_model(
STL(value ~ trend(window = 16), robust = FALSE),
NAIVE(season_adjust)
))
mystery_dcmp_fit %>%
forecast() %>%
autoplot(filter(train, index >= yearmonth("Jan 2007")))
mystery_dcmp_fit <- train %>%
model(stlf = decomposition_model(
STL(value ~ trend(window = 16), robust = T),
NAIVE(season_adjust)
))
mystery_dcmp_fit %>%
forecast() %>%
autoplot(filter(train, index >= yearmonth("Jan 2007")))
View(data)
fit_trends <- train %>% model(drift = RW(value ~ drift()),
baseline = TSLM(value ~ trend()),
exponential = TSLM(log(value) ~ trend()),
piecewise = TSLM(value ~ trend(knots = c("1994 Jan", "1977 Jan","1979 Jan","1984 Jan","1990 Jan","1994 Jan", "2000 Jan","2012 Jan","2016 Jan"))))
fit_trends <- train %>% model(drift = RW(value ~ drift()),
baseline = TSLM(value ~ trend()),
exponential = TSLM(log(value) ~ trend()),
piecewise = TSLM(value ~ trend(knots = c("1994 Jan", "1977 Jan","1979 Jan","1984 Jan","1990 Jan", "2000 Jan","2012 Jan","2016 Jan"))))
fit_trends <- train %>% model(drift = RW(value ~ drift()),
baseline = TSLM(value ~ trend()),
exponential = TSLM(log(value) ~ trend()),
piecewise = TSLM(value ~ trend(knots = c("1979 Jan","1984 Jan","1990 Jan","1994 Jan", "2000 Jan","2012 Jan","2016 Jan"))))
train
fit_trends <- train %>% model(drift = RW(value ~ drift()),
baseline = TSLM(value ~ trend()),
exponential = TSLM(log(value) ~ trend())
#piecewise = TSLM(value ~ trend(knots = c("1979 Jan","1984 Jan","1990 Jan","1994 Jan", "2000 Jan","2012 Jan","2016 Jan")))
)
fit_trends  %>%  glimpse()
fit_trends[1]  %>%  autoplot()
fit_trends  %>%  autoplot(train)
fit_trends[1]  %>%  autoplot(train)
fit_trends %>%
forecast() %>%
autoplot(filter(train, index >= yearmonth("Jan 2007")))
fit_trends[1] %>%
forecast() %>%
autoplot(filter(train, index >= yearmonth("Jan 2007")))
fit_trends %>%
forecast() %>%
autoplot(filter(train, index >= yearmonth("Jan 2007")))
fit_trends %>%
forecast() %>%
autoplot(filter(train, index >= yearmonth("Jan 2007")))+
facet_wrap(~.model)
setwd("C:/Users/emilr/PyCipio")
data <- read.csv(file = "sample_data.csv", header = T)
View(data)
View(data)
View(data)
pacman::p_load(tidyverse, fpp3, tsibble, feasts, fable)
#load USA sample data covid (statewise)
data <- read.csv(file = "sample_data.csv", header = T)
View(data)
View(data)
y <- tsibble(
Day = min(time(data$date)):max(time(data$date)),
Observation = data$confirmed,
index = date
)
y <- tsibble(
Year = min(time(data$date)):max(time(data$date)),
Observation = data$confirmed,
index = Year
)
View(y)
tsi <- data %>%
select(-Date) %>%
as_tsibble(key = c(confirmed, population, administrative_area_label_2),
index = data)
#Create tsibble
tsi <- data %>%
select(-date) %>%
as_tsibble(key = c(confirmed, population, administrative_area_label_2),
index = date)
#Create tsibble
tsi <- data %>%
select(-date) %>%
as_tsibble(key = c(confirmed, population, administrative_area_level_2),
index = date)
str(data)
#Create tsibble
tsi <- data %>%
mutate(date = date(date)) %>%
select(-date) %>%
as_tsibble(key = c(confirmed, population, administrative_area_level_2),
index = date)
#Create tsibble
tsi <- data %>%
mutate(date = as.Date(date)) %>%
select(-date) %>%
as_tsibble(key = c(confirmed, population, administrative_area_level_2),
index = date)
#Create tsibble
tsi <- data %>%
mutate(date = as.Date(date)) %>%
select(-date) %>%
as_tsibble(key = c(confirmed, population, administrative_area_level_2), index = date)
View(y)
#Create tsibble
tsi <- data %>%
mutate(date = as_date(date)) %>%
select(-date) %>%
as_tsibble(key = c(confirmed, population, administrative_area_level_2), index = date)
#Create tsibble
tsi <- data %>%
mutate(date = as_date(date)) #%>%
#select(-date) %>%
#as_tsibble(key = c(confirmed, population, administrative_area_level_2), index = date)
View(tsi)
#Create tsibble
tsi <- data %>%
mutate(date = as_date(date)) %>%
as_tsibble(key = c(confirmed, population, administrative_area_level_2), index = date)
View(y)
View(tsi)
View(tsi)
View(data)
View(tsi)
#Create tsibble
tsi <- data %>%
mutate(date = as_date(date)) %>%
as_tsibble(key = c(confirmed, population, administrative_area_level_2), index = date) %>%
select(c(date, confirmed, administrative_area_level_2))
View(tsi)
#Create tsibble
tsi <- data %>%
mutate(date = as_date(date)) %>%
as_tsibble(key = c(confirmed, administrative_area_level_2), index = date) %>%
select(c(date, confirmed, administrative_area_level_2))
View(tsi)
View(tsi)
tsi %>%
ggplot() +
geom_line(aes(x = date, y = confirmed))
tsi %>%
ggplot(aes(x = date, y = confirmed), fill = administrative_area_level_2 ) +
geom_line()
tsi %>%
ggplot(aes(x = date, y = confirmed), color = administrative_area_level_2 ) +
geom_line()
tsi %>%
ggplot(aes(x = date, y = confirmed color = administrative_area_level_2) ) +
tsi %>%
ggplot(aes(x = date, y = confirmed, color = administrative_area_level_2) ) +
geom_line()
#Create tsibble
tsi <- data %>%
mutate(date = as_date(date)) %>%
as_tsibble(key = c(confirmed, administrative_area_level_2), index = date) %>%
select(c(date, confirmed, administrative_area_level_2)) %>%
filter(administrative_area_level_2 == "Oregon" | "Mississippi" | "Nevada")
#Create tsibble
tsi <- data %>%
mutate(date = as_date(date)) %>%
as_tsibble(key = c(confirmed, administrative_area_level_2), index = date) %>%
select(c(date, confirmed, administrative_area_level_2)) %>%
filter(administrative_area_level_2 == "Oregon" |  administrative_area_level_2 == "Mississippi" | administrative_area_level_2 == "Nevada")
tsi %>%
ggplot(aes(x = date, y = confirmed, color = administrative_area_level_2) ) +
geom_line()
